// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(uuid())
  email         String         @unique
  passwordHash  String         @map("password_hash")
  role          UserRole
  name          String
  phone         String?
  address       String?
  status        UserStatus     @default(ACTIVE)
  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime       @updatedAt @map("updated_at")
  products      Product[]      @relation("VendorProducts")
  cart          Cart?
  orders        Order[]        @relation("CustomerOrders")
  vendorOrders  Order[]        @relation("VendorOrders")
  payments      Payment[]
  notifications Notification[]
  addresses     Address[]
  inventoryLogs InventoryLog[]

  @@map("users")
}

model Category {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  imageUrl  String?  @map("image_url")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  products  Product[]

  @@map("categories")
}

model Product {
  id            Int            @id @default(autoincrement())
  categoryId    Int?           @map("category_id")
  name          String
  description   String?
  price         Decimal        @db.Decimal(10, 2)
  stock         Int            @default(0)
  imageUrl      String?        @map("image_url")
  dataAiHint    String?        // Added to match existing Product type
  vendorId      String?        @map("vendor_id") @db.Uuid // Explicitly set db.Uuid for Prisma < 5.0.0 compatibility if needed, otherwise Prisma infers
  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime       @updatedAt @map("updated_at")
  category      Category?      @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  vendor        User?          @relation("VendorProducts", fields: [vendorId], references: [id], onDelete: SetNull)
  cartItems     CartItem[]
  orderItems    OrderItem[]
  inventoryLogs InventoryLog[]

  @@index([categoryId])
  @@index([vendorId])
  @@map("products")
}

model Cart {
  id        Int        @id @default(autoincrement())
  userId    String     @unique @map("user_id") @db.Uuid
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     CartItem[]

  @@index([userId])
  @@map("carts")
}

model CartItem {
  id        Int      @id @default(autoincrement())
  cartId    Int      @map("cart_id")
  productId Int      @map("product_id")
  quantity  Int
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([cartId, productId])
  @@index([cartId])
  @@map("cart_items")
}

model Order {
  id              Int           @id @default(autoincrement())
  userId          String?       @map("user_id") @db.Uuid
  vendorId        String?       @map("vendor_id") @db.Uuid
  customerName    String        @map("customer_name")
  customerAddress String        @map("customer_address")
  total           Decimal       @db.Decimal(10, 2)
  status          OrderStatus   @default(PENDING)
  paymentStatus   PaymentStatus @default(PENDING_PAYMENT) @map("payment_status")
  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime      @updatedAt @map("updated_at")
  user            User?         @relation("CustomerOrders", fields: [userId], references: [id], onDelete: SetNull)
  vendor          User?         @relation("VendorOrders", fields: [vendorId], references: [id], onDelete: SetNull)
  items           OrderItem[]
  payment         Payment?

  @@index([userId])
  @@index([vendorId])
  @@map("orders")
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  orderId   Int      @map("order_id")
  productId Int?     @map("product_id")
  quantity  Int
  price     Decimal  @db.Decimal(10, 2) // Price at the time of order
  createdAt DateTime @default(now()) @map("created_at")
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product? @relation(fields: [productId], references: [id], onDelete: SetNull)

  @@index([orderId])
  @@map("order_items")
}

model Payment {
  id            Int           @id @default(autoincrement())
  orderId       Int           @unique @map("order_id")
  userId        String?       @map("user_id") @db.Uuid
  amount        Decimal       @db.Decimal(10, 2)
  transactionId String?       @map("transaction_id")
  status        PaymentStatus @default(PENDING_PAYMENT)
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @updatedAt @map("updated_at")
  order         Order         @relation(fields: [orderId], references: [id], onDelete: Cascade)
  user          User?         @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([orderId])
  @@map("payments")
}

model Notification {
  id        Int              @id @default(autoincrement())
  userId    String           @map("user_id") @db.Uuid
  type      NotificationType
  message   String
  isRead    Boolean          @default(false) @map("is_read")
  createdAt DateTime         @default(now()) @map("created_at")
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("notifications")
}

model Address {
  id           Int      @id @default(autoincrement())
  userId       String   @map("user_id") @db.Uuid
  addressLine  String   @map("address_line")
  city         String
  state        String
  postalCode   String   @map("postal_code")
  country      String
  isDefault    Boolean  @default(false) @map("is_default")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("addresses")
}

model Analytics {
  id        Int           @id @default(autoincrement())
  type      AnalyticsType
  data      Json
  date      DateTime      @db.Date
  createdAt DateTime      @default(now()) @map("created_at")

  @@index([date])
  @@map("analytics")
}

model InventoryLog {
  id             Int                  @id @default(autoincrement())
  productId      Int?                 @map("product_id")
  vendorId       String?              @map("vendor_id") @db.Uuid
  changeType     InventoryChangeType  @map("change_type")
  quantityChange Int                  @map("quantity_change")
  reason         String?
  createdAt      DateTime             @default(now()) @map("created_at")
  product        Product?             @relation(fields: [productId], references: [id], onDelete: SetNull)
  vendor         User?                @relation(fields: [vendorId], references: [id], onDelete: SetNull)

  @@map("inventory_logs")
}

enum UserRole {
  CUSTOMER @map("customer")
  VENDOR @map("vendor")
  ADMIN @map("admin")
}

enum UserStatus {
  ACTIVE @map("active")
  INACTIVE @map("inactive")
  SUSPENDED @map("suspended")
}

enum OrderStatus {
  PENDING @map("pending")
  PROCESSING @map("processing")
  SHIPPED @map("shipped")
  DELIVERED @map("delivered")
  CANCELLED @map("cancelled")
}

enum PaymentStatus {
  PENDING_PAYMENT @map("pending") // Renamed from PENDING to avoid conflict if used directly as enum name
  COMPLETED @map("completed")
  FAILED @map("failed")
}

enum NotificationType {
  ORDER_UPDATE @map("order_update")
  STOCK_ALERT @map("stock_alert")
  SYSTEM_MESSAGE @map("system_message")
}

enum AnalyticsType {
  ORDER @map("order")
  USER @map("user")
  PRODUCT @map("product")
}

enum InventoryChangeType {
  ADD @map("add")
  REMOVE @map("remove")
  UPDATE @map("update")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["views"] // Add other preview features if needed
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  // directUrl = env("DIRECT_URL") // Only if using connection pooling and need a direct URL for migrations
}

enum UserRole {
  CUSTOMER
  ADMIN
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  passwordHash  String? // For Credentials provider
  image         String?
  role          UserRole  @default(CUSTOMER)
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  // Optional fields from your original schema if needed for other purposes
  phone         String?
  address       String? // Consider normalizing address to a separate Address model if complex
  status        String?   @default("active") // From your original schema, consider if still needed or use UserRole

  accounts      Account[]
  sessions      Session[]
  carts         Cart[]
  orders        Order[]   @relation("CustomerOrders") // Orders placed by this user
  assignedOrders Order[]   @relation("VendorOrders") // Orders assigned to this user if they are a vendor
  payments      Payment[]
  notifications Notification[]
  addresses     Address[] // User's saved addresses
  products      Product[] @relation("VendorProducts") // Products listed by this user if they are a vendor
  inventoryLogs InventoryLog[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Category {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  imageUrl  String?  @map("image_url")
  dataAiHint String? @map("data_ai_hint")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  products Product[]

  @@map("categories")
}

enum ProductStatus {
  ACTIVE
  ARCHIVED
}

model Product {
  id          Int      @id @default(autoincrement())
  categoryId  Int?     @map("category_id")
  name        String   @unique // Assuming product names should be unique
  description String?
  price       Decimal  @db.Decimal(10, 2)
  stock       Int      @default(0)
  imageUrl    String?  @map("image_url")
  dataAiHint  String?  @map("data_ai_hint")
  vendorId    String?  @map("vendor_id") // This will store the admin's User ID (which is a string/cuid)
  status      ProductStatus @default(ACTIVE)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  category      Category?     @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  vendor        User?         @relation("VendorProducts", fields: [vendorId], references: [id], onDelete: SetNull)
  cartItems     CartItem[]
  orderItems    OrderItem[]
  inventoryLogs InventoryLog[]

  @@index([categoryId])
  @@index([vendorId])
  @@map("products")
}

model Cart {
  id        Int      @id @default(autoincrement())
  userId    String   @unique @map("user_id") // One cart per user
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  cartItems CartItem[]

  @@map("carts")
}

model CartItem {
  id        Int      @id @default(autoincrement())
  cartId    Int      @map("cart_id")
  productId Int      @map("product_id")
  quantity  Int
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")


  cart    Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([cartId, productId])
  @@map("cart_items")
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}

model Order {
  id              Int           @id @default(autoincrement())
  userId          String?       @map("user_id") // Customer who placed the order
  vendorId        String?       @map("vendor_id") // Vendor assigned to fulfill (can be null if system fulfills or for future)
  customerName    String        @map("customer_name")
  customerAddress String        @map("customer_address")
  total           Decimal       @db.Decimal(10, 2)
  status          OrderStatus   @default(PENDING)
  paymentStatus   PaymentStatus @default(PENDING) @map("payment_status")
  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime      @updatedAt @map("updated_at")

  user       User?        @relation("CustomerOrders", fields: [userId], references: [id], onDelete: SetNull)
  vendor     User?        @relation("VendorOrders", fields: [vendorId], references: [id], onDelete: SetNull) // For admin/seller fulfilment
  orderItems OrderItem[]
  payment    Payment?

  @@index([userId])
  @@index([vendorId])
  @@map("orders")
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  orderId   Int      @map("order_id")
  productId Int?     @map("product_id")
  quantity  Int
  price     Decimal  @db.Decimal(10, 2) // Price at the time of order
  createdAt DateTime @default(now()) @map("created_at")

  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product? @relation(fields: [productId], references: [id], onDelete: SetNull) // Product might be deleted later

  @@map("order_items")
}

model Payment {
  id            Int           @id @default(autoincrement())
  orderId       Int           @unique @map("order_id")
  userId        String?       @map("user_id")
  amount        Decimal       @db.Decimal(10, 2)
  transactionId String?       @map("transaction_id")
  status        PaymentStatus @default(PENDING)
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @updatedAt @map("updated_at")

  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
  user  User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("payments")
}

enum NotificationType {
  ORDER_UPDATE
  STOCK_ALERT
  SYSTEM_MESSAGE
}

model Notification {
  id        Int              @id @default(autoincrement())
  userId    String           @map("user_id")
  type      NotificationType
  message   String
  isRead    Boolean          @default(false) @map("is_read")
  createdAt DateTime         @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model Address {
  id           Int      @id @default(autoincrement())
  userId       String   @map("user_id")
  addressLine  String   @map("address_line")
  city         String
  state        String
  postalCode   String   @map("postal_code")
  country      String
  isDefault    Boolean  @default(false) @map("is_default")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("addresses")
}

// Analytics and InventoryLogs might be too complex for initial setup with NextAuth.js
// but keeping them as per your original SQL schema for completeness
// If they are not immediately used, they don't harm.

model Analytics {
  id        Int      @id @default(autoincrement())
  type      String // Consider an enum if types are fixed: ANALYTICS_ORDER, ANALYTICS_USER, ANALYTICS_PRODUCT
  data      Json
  date      DateTime @db.Date
  createdAt DateTime @default(now()) @map("created_at")

  @@index([date])
  @@map("analytics")
}

enum InventoryLogChangeType {
  ADD
  REMOVE
  UPDATE
}

model InventoryLog {
  id             Int                    @id @default(autoincrement())
  productId      Int?                   @map("product_id")
  vendorId       String?                @map("vendor_id") // Admin's User ID
  changeType     InventoryLogChangeType @map("change_type")
  quantityChange Int                    @map("quantity_change")
  reason         String?
  createdAt      DateTime               @default(now()) @map("created_at")

  product Product? @relation(fields: [productId], references: [id], onDelete: SetNull)
  vendor  User?    @relation(fields: [vendorId], references: [id], onDelete: SetNull)

  @@map("inventory_logs")
}

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  customer
  vendor
  admin

  @@map("user_role")
}

enum UserStatus {
  active
  inactive
  suspended

  @@map("user_status")
}

enum OrderStatus {
  pending
  processing
  shipped
  delivered
  cancelled

  @@map("order_status")
}

enum PaymentStatus {
  pending
  completed
  failed

  @@map("payment_status_enum")
}

enum NotificationType {
  order_update
  stock_alert
  system_message

  @@map("notification_type")
}

enum ChangeType {
  add
  remove
  update

  @@map("change_type")
}

model User {
  id            String       @id @default(uuid()) @db.Uuid
  email         String       @unique
  passwordHash  String       @map("password_hash")
  role          UserRole
  name          String
  phone         String?
  address       String?
  status        UserStatus   @default(active)
  createdAt     DateTime     @default(now()) @map("created_at")
  updatedAt     DateTime     @updatedAt @map("updated_at")
  products      Product[]    @relation("VendorProducts")
  carts         Cart[]
  orders        Order[]      @relation("CustomerOrders")
  vendorOrders  Order[]      @relation("VendorOrders")
  payments      Payment[]
  notifications Notification[]
  addresses     Address[]
  inventoryLogs InventoryLog[]

  @@map("users")
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  imageUrl  String?   @map("image_url")
  products  Product[]
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")

  @@map("categories")
}

model Product {
  id            Int            @id @default(autoincrement())
  categoryId    Int?           @map("category_id")
  name          String         @unique @map("name") // Added @unique here
  description   String?
  price         Decimal        @db.Decimal(10, 2)
  stock         Int            @default(0)
  imageUrl      String?        @map("image_url")
  dataAiHint    String?        @map("data_ai_hint")
  vendorId      String?        @db.Uuid @map("vendor_id")
  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime       @updatedAt @map("updated_at")
  category      Category?      @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  vendor        User?          @relation("VendorProducts", fields: [vendorId], references: [id], onDelete: SetNull)
  cartItems     CartItem[]
  orderItems    OrderItem[]
  inventoryLogs InventoryLog[]

  @@index([categoryId])
  @@index([vendorId])
  @@map("products")
}

model Cart {
  id        Int        @id @default(autoincrement())
  userId    String     @unique @db.Uuid @map("user_id") // One cart per user
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     CartItem[]

  @@map("carts")
}

model CartItem {
  id         Int      @id @default(autoincrement())
  cartId     Int      @map("cart_id")
  productId  Int      @map("product_id")
  quantity   Int
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")
  cart       Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([cartId, productId])
  @@index([cartId])
  @@map("cart_items")
}

model Order {
  id              Int           @id @default(autoincrement())
  userId          String?       @db.Uuid @map("user_id")
  vendorId        String?       @db.Uuid @map("vendor_id")
  customerName    String        @map("customer_name")
  customerAddress String        @map("customer_address")
  total           Decimal       @db.Decimal(10, 2)
  status          OrderStatus   @default(pending)
  paymentStatus   PaymentStatus @default(pending) @map("payment_status")
  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime      @updatedAt @map("updated_at")
  customer        User?         @relation("CustomerOrders", fields: [userId], references: [id], onDelete: SetNull)
  vendor          User?         @relation("VendorOrders", fields: [vendorId], references: [id], onDelete: SetNull)
  items           OrderItem[]
  payment         Payment?

  @@index([userId])
  @@index([vendorId])
  @@map("orders")
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  orderId   Int      @map("order_id")
  productId Int?     @map("product_id")
  quantity  Int
  price     Decimal  @db.Decimal(10, 2) // Price at the time of order
  createdAt DateTime @default(now()) @map("created_at")
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product? @relation(fields: [productId], references: [id], onDelete: SetNull)

  @@index([orderId])
  @@map("order_items")
}

model Payment {
  id             Int           @id @default(autoincrement())
  orderId        Int           @unique @map("order_id")
  userId         String?       @db.Uuid @map("user_id")
  amount         Decimal       @db.Decimal(10, 2)
  transactionId  String?       @map("transaction_id")
  status         PaymentStatus @default(pending)
  createdAt      DateTime      @default(now()) @map("created_at")
  updatedAt      DateTime      @updatedAt @map("updated_at")
  order          Order         @relation(fields: [orderId], references: [id], onDelete: Cascade)
  user           User?         @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("payments")
}

model Notification {
  id        Int              @id @default(autoincrement())
  userId    String           @db.Uuid @map("user_id")
  type      NotificationType
  message   String           @db.Text
  isRead    Boolean          @default(false) @map("is_read")
  createdAt DateTime         @default(now()) @map("created_at")
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("notifications")
}

model Address {
  id           Int      @id @default(autoincrement())
  userId       String   @db.Uuid @map("user_id")
  addressLine  String   @map("address_line") @db.Text
  city         String
  state        String
  postalCode   String   @map("postal_code")
  country      String
  isDefault    Boolean  @default(false) @map("is_default")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("addresses")
}

// Analytics table - ensure `type` values align with your application's needs
// For example, if you have fixed types, consider an enum
// enum AnalyticsType { order, user, product @@map("analytics_type") }
model Analytics {
  id        Int      @id @default(autoincrement())
  type      String   // If types are fixed, consider an enum: AnalyticsType
  data      Json     @db.JsonB
  date      DateTime @db.Date
  createdAt DateTime @default(now()) @map("created_at")

  @@index([date])
  @@map("analytics")
}

model InventoryLog {
  id             Int       @id @default(autoincrement())
  productId      Int?      @map("product_id")
  vendorId       String?   @db.Uuid @map("vendor_id")
  changeType     ChangeType @map("change_type")
  quantityChange Int       @map("quantity_change")
  reason         String?   @db.Text
  createdAt      DateTime  @default(now()) @map("created_at")
  product        Product?  @relation(fields: [productId], references: [id], onDelete: SetNull)
  vendor         User?     @relation(fields: [vendorId], references: [id], onDelete: SetNull)

  @@map("inventory_logs")
}
